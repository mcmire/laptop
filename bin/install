#!/usr/bin/env bash

set -euo pipefail

something_already_printed=0

absolute-path-of() {
  echo $(cd "$(dirname "$1")" &>/dev/null && pwd)/$(basename "$1")
}

colorize() {
  local code=

  case "$1" in
    bold)
      code=1
      ;;
    red)
      code=31
      ;;
    green)
      code=32
      ;;
    yellow)
      code=33
      ;;
    blue)
      code=34
      ;;
    *)
      echo "WARNING: $1 is an invalid color"
      code=0
      ;;
  esac

  echo -ne "\033[${code}m"
  echo -n "${@:2}"
  echo -ne "\033[0m"
}

pad-from-existing-output() {
  if [[ $something_already_printed -eq 1 ]]; then
    echo
  fi
}

echo-in() {
  echo $(colorize "$@")
}

success() {
  echo-in green "$@"
}

warning() {
  echo-in yellow "$@"
}

info() {
  echo-in bold "$@"
}

error() {
  echo-in red "$@"
}

pad-from-existing-output() {
  if [[ $something_already_printed -eq 1 ]]; then
    echo
  fi
}

banner() {
  pad-from-existing-output
  echo-in blue "=== $@ ==="
  something_already_printed=1
}

inspect-command() {
  echo "> $@"
}

run() {
  if [[ $VERBOSE -eq 1 ]]; then
    inspect-command "$@"
  fi

  if [[ $DRY_RUN -eq 0 ]]; then
    "$@"
  fi
}

print-help() {
  cat <<TEXT
$(colorize blue "## DESCRIPTION")

The 'install' command installs a bunch of Homebrew packages as specified in a
Brewfile.

It also configures iTerm with a couple of Dynamic Profiles which use
Solarized Dark and Solarized Light as their themes. This is documented here
<https://www.iterm2.com/documentation-dynamic-profiles.html> and you can find
the location of this file here:
<~/Library/Application Support/iTerm2/DynamicProfiles>

$(colorize blue "## USAGE")

$(colorize bold "$0 [OPTIONS]")

where OPTIONS are one or more of:

--dry-run, --noop, -n
  Don't actually install any packages or change the filesystem.
--force, -f
  If a file already exists, this overwrites it.
--verbose, -V
  Show every command that is run when it is run.
--help, -h
  You're looking at it ;)
TEXT
}

parse-args() {
  DRY_RUN=0
  FORCE=0
  VERBOSE=0

  local arg=

  while [[ ${1:-} ]]; do
    arg="${1:-}"
    case "$arg" in
      --dry-run | --noop | -n)
        DRY_RUN=1
        VERBOSE=1
        shift
        ;;
      --force | -f)
        FORCE=1
        shift
        ;;
      --verbose | -V)
        VERBOSE=1
        shift
        ;;
      --help | -h | -?)
        print-help | more -R
        exit
        ;;
      *)
        error "Unknown argument '$arg' given."
        echo "Please run $0 --help for usage."
        exit 1
    esac
  done
}

create-symlink() {
  local full_source_path="$1"
  local full_destination_path="$2"

  run mkdir -p "$(dirname "$full_destination_path")"

  if [[ $FORCE -eq 1 ]]; then
    run rm -rf "$full_destination_path"
  fi

  if ! [[ -e "$full_destination_path" || -L "$full_destination_path" ]]; then
    run ln -s "$full_source_path" "$full_destination_path"
    echo "Installed to $profiles_plist."
  fi
}

main() {
  parse-args "$@"

  if [[ $DRY_RUN -eq 1 ]]; then
    info "Running in dry-run mode."
    echo
  fi

  banner "Installing software"
  run brew bundle

  banner "Installing iTerm profiles"
  profiles_plist="$HOME/Library/Application Support/iTerm2/DynamicProfiles/profiles.plist"
  create-symlink $(absolute-path-of src/iterm-dynamic-profiles.plist) "$profiles_plist"

  if ! [[ -d "$HOME/.tmux/plugins/tpm" ]]; then
    banner "Installing tpm"
    run git clone "https://github.com/tmux-plugins/tpm" "$HOME/.tmux/plugins/tpm"
    run "$HOME/.tmux/plugins/tpm/bin/install_plugins"
  fi

  if [[ $DRY_RUN -eq 1 ]]; then
    echo
    info "Don't worry â€” nothing really happened!"
  fi

  echo
  success "Install complete!"
}

main "$@"
